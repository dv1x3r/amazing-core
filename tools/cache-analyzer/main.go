package main

import (
	"bytes"
	"database/sql"
	"flag"
	"fmt"
	"os"

	"github.com/dv1x3r/amazing-core/internal/game/types"
	_ "github.com/mattn/go-sqlite3"
)

func main() {
	blobDB := flag.String("db", "", "Path to the blob.db database.")

	flag.Parse()

	if *blobDB == "" {
		flag.PrintDefaults()
		return
	}

	if err := analyzeBlobDB(*blobDB); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func analyzeBlobDB(blobDB string) error {
	db, err := sql.Open("sqlite3", blobDB)
	if err != nil {
		return err
	}
	defer db.Close()

	var cdnid string
	var blob []byte

	rows, err := db.Query("select cdnid, blob from asset_file order by id;")
	for rows.Next() {
		if err := rows.Scan(&cdnid, &blob); err != nil {
			return err
		}

		if err := processRow(cdnid, blob); err != nil {
			return err
		}
	}

	return nil
}

func processRow(cdnid string, blob []byte) error {
	oid := types.OID{}
	oid.FromCDNID(cdnid)
	fileType := detectFileType(blob)

	fmt.Printf("%s %d %s \n", cdnid, oid.ToLong(), fileType)
	return nil
}

func detectFileType(blob []byte) string {

	blob = bytes.TrimSpace(blob) // trim spaces and utf-8 bom
	blob = bytes.TrimPrefix(blob, []byte{0xEF, 0xBB, 0xBF})

	switch {

	case bytes.HasPrefix(blob, []byte{0xFF, 0xFB}):
		return "audio/mp3"

	case bytes.HasPrefix(blob, []byte{0x4F, 0x67, 0x67, 0x53, 0x00}):
		return "audio/ogg"

	case bytes.HasPrefix(blob, []byte{0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00}):
		return "image/png"

	case bytes.HasPrefix(blob, []byte{0x55, 0x6E, 0x69, 0x74, 0x79, 0x46, 0x53, 0x00}):
		return "UnityFS"

	case bytes.HasPrefix(blob, []byte{0x55, 0x6E, 0x69, 0x74, 0x79, 0x57, 0x65, 0x62, 0x00}):
		return "UnityWeb"

	case bytes.HasPrefix(blob, []byte{0x41, 0x6E, 0x6E, 0x6F, 0x75, 0x6E, 0x63, 0x65, 0x6D, 0x65, 0x6E, 0x74}):
		return "TreeNode/Announcement"

	case bytes.HasPrefix(blob, []byte{0x41, 0x72, 0x65, 0x61, 0x73}):
		return "TreeNode/Areas"

	case bytes.HasPrefix(blob, []byte{0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79}):
		return "TreeNode/AvatarProperty"

	case bytes.HasPrefix(blob, []byte{0x42, 0x75, 0x69, 0x6C, 0x64, 0x69, 0x6E, 0x67, 0x43, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x69, 0x6F, 0x6E}):
		return "TreeNode/BuildingCompletion"

	case bytes.HasPrefix(blob, []byte{0x42, 0x75, 0x69, 0x6C, 0x64, 0x69, 0x6E, 0x67, 0x55, 0x49}):
		return "TreeNode/BuildingUI"

	case bytes.HasPrefix(blob, []byte{0x44, 0x72, 0x65, 0x73, 0x73, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6C, 0x6F, 0x74, 0x73}):
		return "TreeNode/DressAvatarSlots"

	case bytes.HasPrefix(blob, []byte{0x46, 0x69, 0x73, 0x68}):
		return "TreeNode/Fish"

	case bytes.HasPrefix(blob, []byte{0x47, 0x61, 0x6D, 0x65}):
		return "TreeNode/Game"

	case bytes.HasPrefix(blob, []byte{0x49, 0x74, 0x65, 0x6D}):
		return "TreeNode/Item"

	case bytes.HasPrefix(blob, []byte{0x4C, 0x65, 0x76, 0x65, 0x6C, 0x55, 0x70}):
		return "TreeNode/LevelUp"

	case bytes.HasPrefix(blob, []byte{0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E}):
		return "TreeNode/Mission"

	case bytes.HasPrefix(blob, []byte{0x4E, 0x50, 0x43, 0x73}):
		return "TreeNode/NPCs"

	case bytes.HasPrefix(blob, []byte{0x4E, 0x50, 0x43, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73}):
		return "TreeNode/NPCAnimations"

	case bytes.HasPrefix(blob, []byte{0x4E, 0x50, 0x43, 0x52, 0x65, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x68, 0x69, 0x70, 0x73}):
		return "TreeNode/NPCRelationships"

	case bytes.HasPrefix(blob, []byte{0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79}):
		return "TreeNode/Property"

	case bytes.HasPrefix(blob, []byte{0x63, 0x51, 0x75, 0x65, 0x73, 0x74}):
		return "TreeNode/cQuest"

	case bytes.HasPrefix(blob, []byte{0x51, 0x75, 0x65, 0x73, 0x74}):
		return "TreeNode/Quest"

	case bytes.HasPrefix(blob, []byte{0x52, 0x6F, 0x6F, 0x74}):
		return "TreeNode/Root"

	case bytes.HasPrefix(blob, []byte{0x53, 0x70, 0x61, 0x77, 0x6E, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73}):
		return "TreeNode/SpawnPoints"

	case bytes.HasPrefix(blob, []byte{0x55, 0x49, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74}):
		return "TreeNode/UIWidget"

	case bytes.HasPrefix(blob, []byte{0x7B}):
		return "json"

	default:
		return ""
	}

}
